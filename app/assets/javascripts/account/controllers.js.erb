angular.module('Directory.account.controllers', ['stripe', 'Directory.account.models'])
.config(function () {
  Stripe.setPublishableKey('<%= ENV["STRIPE_PUBLISHABLE_KEY"] %>');
})
.controller('AccountCtrl', ['$scope', 'Me', '$modal', function ($scope, Me, $modal) {
  Me.authenticated(function (me) {
    $scope.me = me;
  });

  $scope.errors = {};

  $scope.saveCC = function(status, response) {
    if (response.error) {
      var e = {};
      e[response.error.param] = response.error.message;
      angular.copy(e, $scope.errors);
    } else {
      Me.authenticated(function (me) {

      });
    }
  }

  $scope.changeCreditCard = function () {
    $scope.pendingPlan = $scope.me.plan;
    $modal({template: '/assets/account/credit_card.html', persist: true, show: true, backdrop: 'static', scope: $scope});
  }
}])
.controller('AccountPlanCtrl', ['$scope', 'Me', 'Plan', '$modal', '$location', function ($scope, Me, Plan, $modal, $location) {
  $scope.interval = 'month';
  $scope.offer = $scope.offer || {};

  Plan.get().then(function (plans) {
    $scope.plans = plans;
  });
  $scope.community = Plan.community();

  Me.authenticated(function (me) {
    $scope.me = me;
    $scope.pendingPlan = me.plan.id;
    $scope.interval = me.plan.interval;
  });

  $scope.paidPlan = function (plan) {
    return plan.amount > 0;
  };

  $scope.isCurrentPlan = function (plan) {
    return plan && $scope.me && $scope.me.plan && plan.id == $scope.me.plan.id;
  };

  $scope.isSelectedPlan = function (plan) {
    return plan && $scope.pendingPlan == plan.id;
  }

  $scope.isPaidPlan = function (plan) {
    return plan && plan.amount > 0;
  };

  $scope.changePlan = function (plan) {
    $scope.pendingPlan = plan.id;
  };

  $scope.hasPendingChange = function () {
    return $scope.me && $scope.me.plan && $scope.pendingPlan != $scope.me.plan.id;
  };

  $scope.toggleInterval = function () {
    $scope.interval = ( $scope.interval == 'year' ? 'month' : 'year');
  };

  $scope.oppositeInterval = function () {
    return $scope.interval == 'year' ? 'Monthly' : 'Annual';
  };

  $scope.hasSpecialPlan = function () {
    if (!$scope.me) { return false };
    var special = true;
    angular.forEach($scope.plans, function (plan) {
      if (plan.id == $scope.me.plan.id) {
        special = false;
      }
    });
    return special;
  };

  function getPendingPlan() {
    if ($scope.hasPendingChange()) {
      var returnPlan;
      angular.forEach($scope.plans, function (plan) {
        if ($scope.pendingPlan == plan.id) {
          returnPlan = plan;
        }
      });
      return returnPlan;
    } else {
      return {
        id: $scope.me.plan.id,
        hours: $scope.me.plan.popUpHours,
        amount: $scope.me.plan.amount,
        interval: $scope.me.plan.interval
      };
    }
  }

  $scope.subscribe = function () {
    $scope.pendingPlanObj = getPendingPlan();
    if ($scope.me.creditCard || $scope.pendingPlanObj.amount == 0) {
      $scope.me.plan.id = $scope.pendingPlan;
      $scope.me.subscribe($scope.pendingPlan, $scope.offer.code).then(function () {
        $location.path('/account');
      });
    } else {
      var unregister = $scope.$on('creditCardSubmit', function () {
        unregister();
        $scope.me.plan.id = $scope.pendingPlan;
        $scope.me.subscribe($scope.pendingPlan, $scope.offer.code).then(function () {
          $location.path('/account');
        });
      });
      $modal({template: '/assets/account/credit_card.html', persist: true, show: true, backdrop: 'static', scope: $scope});
    }
  };
  
  $scope.explain = function (def) {
    $scope.explanation=def;
  };
  
  $scope.showExplain= function() {
    $scope.showExplain = true;
  };
  
  $scope.features = [
    {image: "tape_deck.svg", explain: 'The Internet Archive is a non-profit digital library offering free universal access to books, movies & music. To support this mission, Pop Up Archive provides full auto-transcription and analysis of any audio that you agee to publish to The Internet Archive. Simply create a public Internet Archive collection to add your audio to the Internet Archive\'s body of work.', headline: 'Unlimited Publishing to the Internet Archive'},
    {image: "robot.svg", explain: 'Premium plans receive full-length auto-transcription and auto-tagging. Your transcripts will be synched and timestamped, just click a phrase to play it. Our free community plan provides two minutes of auto-transcription and auto-tagging per file for up to two hours of private audio.', headline: 'Full Auto Transcripts and Keywords'},
    {image: "shelf.svg", explain: 'Pop Up Archive provides easy-to-use sound management tools. Sort your audio into public and private collections, and use tags and facets to further refine your media for a powerful search experience.', headline: 'Easy-to-Use Sound Management Tools'},
    {image: "brain_pink.svg", explain: 'Need perfect transcripts? Pop Up Archive has teamed up with the Amara captioning service to provide affordable human-generated transcripts. Upload your file to Pop Up Archive and select the \"Perfect your transcript\" link to get started.', headline: 'Affordable Human-Generated Transcripts'},
    {image: "email.svg", explain: 'Have questions? Use the Support link or email us directly at edison@popuparchive.com. Premium plan members are guaranteed a response within 24 hours.', headline: 'E-Mail Technical Support'},
  ];

}])
.controller('PRXAccountPlanCtrl', ['$scope', 'Me', 'Plan', '$location', function ($scope, Me, Plan, $location) {
  $scope.me = true;
  Plan.get().then(function (plans) {
    var suggest, min = Infinity, max = -1;
    angular.forEach(plans, function (plan) {
      if (plan.interval == 'month') {
        if (plan.amount < min) {
          min = plan.amount;
        }
        if (plan.amount > max) {
          max = plan.amount;
        }
      }
    });
    angular.forEach(plans, function (plan) {
      if (plan.interval == 'month') {
        if (plan.amount < max && plan.amount > min && (!suggest || plan.amount > suggest.amount)) {
          suggest = plan;
        }
      }
    });
    $scope.plan = suggest;
  });

  Me.authenticated(function (me) {
    $scope.me = me;
  });

  $scope.subscribe = function () {
    $scope.signingUp = true;
    $scope.me.subscribe($scope.plan.id, 'prx').then(function () {
      $location.path('/account');
    });
  };

  $scope.cancel = function () {
    $location.path('/account/plan');
  }
}])
.filter('shortInterval', function () {
  return function (interval) {
    if (!interval || interval.toLowerCase() == 'month') {
      return 'mo';
    } else {
      return 'yr';
    }
  }
})
.controller('PRXSignUpCtrl', ['$scope', 'Me', 'Plan', '$location', function ($scope, Me, Plan, $location) {
  Me.authenticated(function (me) {
    $location.path('/account/plan/prx').replace();
  }, function () {
    Plan.get().then(function (plans) {
      var suggest, min = Infinity, max = -1;
      angular.forEach(plans, function (plan) {
        if (plan.interval == 'month') {
          if (plan.amount < min) {
            min = plan.amount;
          }
          if (plan.amount > max) {
            max = plan.amount;
          }
        }
      });
      angular.forEach(plans, function (plan) {
        if (plan.interval == 'month') {
          if (plan.amount < max && plan.amount > min && (!suggest || plan.amount > suggest.amount)) {
            suggest = plan;
          }
        }
      });
      $scope.plan = suggest;
    });
    $scope.subscribe = function () {
      $scope.signingUp = true;
      window.location.href = '/users/sign_up?plan_id=' + $scope.plan.id + '&offer_code=prx';
    };
    $scope.cancel = function () {
      $location.path('/pricing');
    };
  });
}])
.controller('CreditCardCtrl', ['$scope', function ($scope) {
  var currentUser = $scope.currentUser || $scope.me;
  $scope.errors = {};
  $scope.creditCard = currentUser.creditCard;
  $scope.saving = false;
  $scope.save = function(status, response) {
    if (response.error) {
      var e = {};
      e[response.error.param] = response.error.message;
      angular.copy(e, $scope.errors);
    } else {
      $scope.saving = true;
      currentUser.updateCreditCard(response.id).then(function (data) {
        $scope.$emit('creditCardSubmit', data);
        $scope.hide();
      });
    }
  }
}])
.filter('monthOrYear', function () {
  var plans_ = [];
  return function monthOrYear (plans, monthOrYear) {
    if(angular.isArray(plans)) {
      plans_.length = 0;
      angular.forEach(plans, function (plan) {
        plan[monthOrYear].frequency = (plan[monthOrYear].frequency || monthOrYear);
        plan[monthOrYear].hours = (plan[monthOrYear].hours || plan.level);
        plans_.push(plan[monthOrYear]);
      });
      plans = plans_;
    }
    return plans;
  }
})
.controller('SignUpCtrl', ['$scope', 'Me', '$location', 'Plan', '$modal', function($scope, Me, $location, Plan, $modal) {
  Me.authenticated(function (me) {
    $location.path('/account/plan').replace();;
  });

  $scope.interval = 'month';
  $scope.offer = $scope.offer || {};

  Plan.get().then(function (plans) {
    $scope.plans = plans;
    var suggest, min = Infinity, max = -1;
    angular.forEach(plans, function (plan) {
      if (plan.interval == 'month') {
        if (plan.amount < min) {
          min = plan.amount;
        }
        if (plan.amount > max) {
          max = plan.amount;
        }
      }
    });
    angular.forEach(plans, function (plan) {
      if (plan.interval == 'month') {
        if (plan.amount < max && plan.amount > min && (!suggest || plan.amount > suggest.amount)) {
          suggest = plan;
        }
      }
    });
    $scope.pendingPlan = suggest.id;
  });
  $scope.community = Plan.community();

  $scope.paidPlan = function (plan) {
    return plan.amount > 0;
  };

  $scope.isCurrentPlan = function (plan) {
    return plan && $scope.me && $scope.me.plan && plan.id == $scope.me.plan.id;
  };

  $scope.isSelectedPlan = function (plan) {
    return plan && $scope.pendingPlan == plan.id;
  }

  $scope.isPaidPlan = function (plan) {
    return plan && plan.amount > 0;
  };

  $scope.changePlan = function (plan) {
    window.location = "/users/sign_up?plan_id=" + plan.id;
  };

  function getPendingPlan() {
    var returnPlan;
    angular.forEach($scope.plans, function (plan) {
      if ($scope.pendingPlan == plan.id) {
        returnPlan = plan;
      }
    });
    return returnPlan;
  }
}])
;
